generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  firstname String
  lastname  String
  password  String
  otp       String   @default("000000")
  role      UserRole @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  files     File[]
  folders   Folder[]
  flags     Flag[]
  deleted   Boolean  @default(false)
}

model File {
  id        String        @id @default(uuid())
  name      String        @unique
  key       String
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  User      User          @relation(fields: [userId], references: [id])
  userId    String
  Folder    Folder?       @relation(fields: [folderId], references: [id], onDelete: Cascade)
  folderId  String?
  flags     Flag[]
  flagCount Int           @default(0)
  history   FileHistory[]
  deleted   Boolean       @default(false)
}

model Folder {
  id        String   @id @default(uuid())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  files     File[]
  deleted   Boolean  @default(false)
}

model FileHistory {
  id        String     @id @default(uuid())
  action    FileAction
  createdAt DateTime   @default(now())
  File      File?      @relation(fields: [fileId], references: [id], onDelete: NoAction)
  fileId    String?
  deleted   Boolean    @default(false)
}

// For marking uploaded files as unsafe.
model Flag {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  File      File?    @relation(fields: [fileId], references: [id], onDelete: Cascade)
  fileId    String?
  User      User?    @relation(fields: [flaggerId], references: [id])
  flaggerId String
  deleted   Boolean  @default(false)
}

enum UserRole {
  ADMIN
  USER
}

enum FileAction {
  UPLOAD
  DOWNLOAD
  STREAM
  UPDATE
  DELETE
}
